import numpy as np
import time
from itertools import product
DDT1=[[16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0],
[0, 4, 0, 0, 2, 0, 2, 0, 4, 2, 0, 2, 0, 0, 0,0],
[0, 2, 0, 4, 0, 0, 0, 2, 2, 0, 0, 0, 0, 4, 2,0],
[0, 0, 0, 0, 0, 2, 2, 0, 2, 2, 2, 2, 2, 0, 0,2],
[0, 2, 2, 4, 2, 2, 0, 0, 2, 0, 2, 0, 0, 0, 0,0],
[0, 0, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2, 2, 2, 0,0],
[0, 0, 2, 2, 0, 2, 2, 0, 0, 2, 0, 2, 0, 0, 4,0],
[0, 0, 2, 0, 0, 0, 2, 0, 2, 0, 4, 0, 0, 2, 2,2],
[0, 0, 2, 0, 4, 2, 0, 0, 2, 2, 0, 2, 0, 2, 0,0],
[0, 0, 2, 2, 0, 0, 0, 0, 0, 2, 2, 0, 4, 2, 0,2],
[0, 0, 0, 2, 2, 4, 0, 4, 2, 0, 0, 0, 0, 0, 0,2],
[0, 2, 0, 0, 4, 0, 0, 2, 0, 0, 0, 2, 2, 0, 2,2],
[0, 4, 0, 0, 0, 2, 2, 0, 0, 0, 2, 2, 2, 0, 2,0],
[0, 2, 0, 0, 0, 0, 0, 2, 0, 4, 2, 0, 0, 2, 2,2],
[0, 0, 2, 0, 0, 0, 4, 2, 0, 0, 0, 2, 2, 2, 0,2],
[0, 0, 2, 0, 2, 0, 2, 2, 0, 0, 2, 0, 2, 0, 2,2]]

I1=np.identity(1,int)
O1=np.zeros((1,1),int)
I4=np.identity(4,int)
O4=np.zeros((4,4),int)
O16=np.zeros((16,16),int)
I16=np.identity(16,int)
M0 = np.bmat("O1,O1,O1,O1;"
             "O1,I1,O1,O1;"
             "O1,O1,I1,O1;"
             "O1,O1,O1,I1")
M1 = np.bmat("I1,O1,O1,O1;"
             "O1,O1,O1,O1;"
             "O1,O1,I1,O1;"
             "O1,O1,O1,I1")
M2 = np.bmat("I1,O1,O1,O1;"
             "O1,I1,O1,O1;"
             "O1,O1,O1,O1;"
             "O1,O1,O1,I1")
M3 = np.bmat("I1,O1,O1,O1;"
             "O1,I1,O1,O1;"
             "O1,O1,I1,O1;"
             "O1,O1,O1,O1")
M00 = np.bmat("M0,M1,M2,M3;M1,M2,M3,M0;M2,M3,M0,M1;M3,M0,M1,M2")
M11 = np.bmat("M1,M2,M3,M0;M2,M3,M0,M1;M3,M0,M1,M2;M0,M1,M2,M3")
MM=np.bmat("M00,O16,O16,O16;O16,M11,O16,O16;O16,O16,M11,O16;O16,O16,O16,M00")#M'=64X64

INVMMM=np.linalg.inv(MM)
# print(INVMMM)
# I=np.dot(MM,INVMMM)
# print(I)
def Tobinary(x,n):
    Bin=[]
    for i in range(0,n):
        t=(x>>(n-i-1))&0x1
        Bin.append(t)
    return Bin

def DDT(X):
    Y=[]
    counter = 0
    Y1 = [0] * 16
    for i in range(len(X)):
        for j in range(0, 16):
            Y1[j] = DDT1[X[i][j]]
        T = []
        for i1 in range(len(Y1)):
            eqn = []
            for j1 in range(0, 16):
                if Y1[i1][j1] != 0:
                    eqn.append(j1)
            T.append(eqn)
        for p in product(T[0], T[1], T[2], T[3], T[4], T[5], T[6], T[7], T[8], T[9], T[10], T[11], T[12], T[13], T[14], T[15]):
            counter = counter + 1
            Y.append(list(p))
    #print("DDTcounter:", counter)
    #print("DDT:", Y)
    #
    # DDT = open("DDT.txt", 'w')
    # for i2 in range(len(Y)):
    #     DDT.write(str(Y[i2]))
    #     DDT.write("\n")
    # DDT.close()
    return Y
P = [0, 5, 10, 15, 4, 9, 14, 3, 8, 13, 2, 7, 12, 1, 6, 11]

def SR(X):  # define set
    Y=[]
    counter=0
    for i in range(len(X)):
        tmp = [0] * 16
        for j in range(0, 16):
             tmp[j] = X[i][P[j]]
        counter = counter + 1
        Y.append(tmp)
    # print("counterSR:", counter)
    # print("SR:",Y)
    return Y

def MC(X):
    Y=[]
    counter=0
    for i1 in range(len(X)):
        A1 = []
        for u in X[i1]:
            for i3 in range(0, 4):
                t = (u >> (4 - i3 - 1)) & 0x1
                A1.append(t)
        #print(A1)
        B1 = np.dot(MM, A1)
        C1 = np.mod(B1, 2)
        D1 = C1.tolist()
        # print(D1, end='\n\n')
        num = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        for i5 in range(0, 1):
            for j in range(0, 16):
                num[j] = 8 * D1[i5][4 * j] + 4 * D1[i5][4 * j + 1] + 2 * D1[i5][4 * j + 2] + D1[i5][4 * j + 3]
        # print(num)
        counter = counter + 1
        Y.append(num)
    #print("counterMC:",counter)
    #print("MC:",Y)
    return Y

def Encrypt(X):
    Y = []
    tmp0 = []
    Y1 = []
    counter = 0
    tmp0 = DDT(X)
    Y1 = MC(tmp0)
    Y = SR(Y1)
    return Y

possibleDDT = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
               [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
               [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
               [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
               [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
               [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
               [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
               [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
               [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
               [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
               [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
               [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
               [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
               [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
               [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
               [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
for i in range(0, 16):
    temp2=0
    for j in range(0, 16):
        if DDT1[i][j] != 0:
            possibleDDT[i][temp2] = j
            temp2 = j
#print(possibleDDT)

def possibleS(X):
    Y = []
    for i2 in range(0, 16):
        Smin = possibleDDT[X[i2]][0]  # min possible s value
        Y.append(Smin)
    #print("Smin:",Y)
    return Y
#possibleS(A)
def CompareSIZE8(X,W,Z):
    counter3=0
    filename = open("1to1.txt", "a")
    for j9 in range(0, 16):
        if X[j9] > W[Z][j9]:
            #print(">,no exist",Z)
            return 1
        elif X[j9] < W[Z][j9]:
            #print("<,no exist",Z)
            return 0
        elif j9 == 15:
            counter3=counter3+1
            print("=,find,Index:",X)

            filename.write("find=================================:")
            filename.write(str(W[Z]))
            filename.write(str(counter3))
            filename.write("\n")
            return 2
    filename.close()

def YouBiaocompare(X,W,Z):
    for j7 in range(0, 16):
        if X[j7] > W[Z][j7]:
            #print(">,youbiao ",Z)
            return 0
        if X[j7] < W[Z][j7]:
            #print("<,youbiao ",Z)
            return 1
    print("=,youbiao",X)
    return 0

def WHETHERBBOTH(X,W,Z):
    for j1 in range(0, 16):
        if X[j1] > W[Z][j1]:
            #print(">,linjie",Z)
            return 0
        elif X[j1] < W[Z][j1]:
            break
    for i4 in range(0, 16):
        if X[i4] > W[Z-1][i4]:
            #print(">,linjie",Z)
            return 1
        elif X[i4] < W[Z-1][i4]:
            return 0
    print("=,linjie", X)
    return 1

def compare(X,W):
    oldxiao = 0
    oldda =len(W)
    Now_Big_Num =len(W)
    X1=possibleS(X)
    tempduibi = oldxiao
    if tempduibi < Now_Big_Num:
        youbiao = (Now_Big_Num + tempduibi) // 2
        # print("youbiao:", youbiao)
        # print("tempduibi:", tempduibi)
        while CompareSIZE8(X1, W, tempduibi) == 1:
            if YouBiaocompare(X1, W, youbiao) == 1:         #Smin<W[youbiao]
                oldda = youbiao
                youbiao = (oldxiao + oldda) // 2
                # print("oldda1:", oldda)
                # print("youbiao1:", youbiao)
            else:                                      #Smin>W[youbiao]
                oldxiao = youbiao
                youbiao = (oldda + oldxiao+1) // 2
                # print("oldxiao2:", oldxiao)
                # print("youbiao2:", youbiao)
            # if youbiao == 1 or youbiao == 0:
            #     tempduibi = youbiao
            #     CompareSIZE8(X1,W, tempduibi)
            #     tempduibi = Now_Big_Num - 1
            #     CompareSIZE8(X1,W, tempduibi)
            if WHETHERBBOTH(X1, W, youbiao) == 1:
                tempduibi = youbiao
                oldda = Now_Big_Num
                oldxiao = tempduibi
                # print("tempduibi:", tempduibi)
                # print("oldda:", oldda)
        while CompareSIZE8(X1, W, tempduibi) == 0:
            for j1 in range(0, 16):
                if X1[j1] < W[tempduibi][j1]:
                    if possibleDDT[X[j1]][X1[j1]] != 0:
                        X1[j1] = possibleDDT[X[j1]][X1[j1]]
                        for j0 in range(j1 + 1, 16):
                            X1[j0] = possibleDDT[X[j0]][0]
                        # j1 = 16
                    elif j1 > 0:
                        for j3 in range(j1 - 1, -1, -1):
                            if possibleDDT[X[j3]][X1[j3]] != 0:
                                X1[j3] = possibleDDT[X[j3]][X1[j3]]
                                for k in range(j3 + 1, 16):
                                    X1[k] = possibleDDT[X[k]][0]
                                    # j1 = 16
                                    # j3 = -2
                            elif j3 == 0:
                                return 0
                    else:
                        return 0
    return 0

G = [[0, 0, 0, 0, 0, 0,0, 0, 0, 0, 0, 0,0,0,0,0] for j in range(15*16)]
for i in range(0, 16):
    for j in range(0, 15):
        G[15 * i + j][i] = j + 1
#print(G)
filename = open("result.txt", "a")
for i in range(len(G)):
    Q=[G[i]]
    print("input difference=================================================:",G[i])
    filename.write("input difference--------------------------------------------------:")
    filename.write(str(G[i]))
    filename.write("\n")
    G1 = Encrypt(Q)
    G2 = DDT(G1)
    G3=MC(G2)
    Y00 = []
    counter2 = 0
    for s in range(len(G3)):
        cnt_array = np.where(G3[s], 0, 1)
        tmp = np.sum(cnt_array)
        if tmp == 0:
            counter2 = counter2 + 1
            Y00.append(G3[s])
    # print(Y00)
    #print("R.S.M':", counter2)
    for j in range(len(G)):
        U1 = [G[j]]
        print("output difference:",G[j])
        filename.write("output difference:")
        filename.write(str(G[j]))
        filename.write("\n")
        B = Encrypt(U1)
        C = Encrypt(B)
        counter1 = 0
        Y0 = []
        for s in range(len(C)):
            # Y=[]
            cnt_array = np.where(C[s], 0, 1)
            tmp = np.sum(cnt_array)
            if tmp == 0:
                counter1 = counter1 + 1
                Y0.append(C[s])
        # print(Y0)
        #print("INV2R:", counter1)
        for i6 in range(len(Y0)):
            compare(Y0[i6], Y00)
filename.close()




